// Code generated by goyacc -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:1

package main

import __yyfmt__ "fmt"

//line grammar.y:3

import (
	"fmt"
)

type Expr struct {
	Type  string
	Value string
}

//line grammar.y:18
type yySymType struct {
	yys  int
	str  string
	expr *Expr
}

const SELECT = 57346
const INSERT = 57347
const UPDATE = 57348
const DELETE = 57349
const CREATE = 57350
const TABLE = 57351
const FROM = 57352
const WHERE = 57353
const JOIN = 57354
const ON = 57355
const INTO = 57356
const VALUES = 57357
const SET = 57358
const IDENTIFIER = 57359
const STRING_LITERAL = 57360
const INTEGER_LITERAL = 57361
const EQUALS = 57362
const NOT_EQUALS = 57363
const LESS = 57364
const GREATER = 57365
const LESS_EQUALS = 57366
const GREATER_EQUALS = 57367
const COMMA = 57368
const LPAREN = 57369
const RPAREN = 57370
const INT = 57371
const VARCHAR = 57372
const TEXT = 57373
const DATE = 57374
const FLOAT = 57375

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"CREATE",
	"TABLE",
	"FROM",
	"WHERE",
	"JOIN",
	"ON",
	"INTO",
	"VALUES",
	"SET",
	"IDENTIFIER",
	"STRING_LITERAL",
	"INTEGER_LITERAL",
	"EQUALS",
	"NOT_EQUALS",
	"LESS",
	"GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"COMMA",
	"LPAREN",
	"RPAREN",
	"INT",
	"VARCHAR",
	"TEXT",
	"DATE",
	"FLOAT",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:145

func main() {
	yyParse()
}

func yyError(s string) {
	fmt.Printf("Error: %s\n", s)
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 97

var yyAct = [...]int8{
	51, 90, 62, 73, 42, 45, 32, 16, 65, 66,
	67, 68, 69, 14, 55, 56, 57, 58, 59, 60,
	12, 89, 21, 23, 91, 88, 25, 26, 27, 61,
	13, 50, 80, 77, 34, 29, 74, 40, 63, 22,
	52, 53, 47, 87, 41, 49, 83, 43, 81, 46,
	39, 38, 17, 31, 28, 75, 70, 24, 72, 15,
	78, 71, 48, 37, 7, 8, 9, 10, 11, 76,
	33, 20, 18, 19, 30, 64, 79, 44, 85, 82,
	54, 86, 36, 84, 35, 6, 5, 4, 92, 3,
	2, 1, 93, 0, 0, 95, 94,
}

var yyPact = [...]int16{
	60, -1000, -1000, -1000, -1000, -1000, -1000, -4, 45, 35,
	62, 64, 61, -1000, 13, 35, 41, -1000, 35, 35,
	35, -1000, 37, 8, 36, 59, 7, 51, 13, -4,
	59, 24, -1000, 30, 32, 59, 50, 35, -1000, 3,
	-1000, 22, -1000, -6, 1, 12, -21, -1000, 35, 48,
	43, 10, -1000, -1000, 22, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32, -1000, -1000, 6, -1000, -1000, -1000,
	47, 30, 5, -1000, 31, -1000, 12, 27, 30, -1000,
	22, 23, -1000, -3, -1000, -7, -2, 22, -1000, -1000,
	-1000, 22, 10, -2, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 91, 90, 89, 87, 86, 85, 20, 7, 84,
	6, 82, 4, 22, 80, 0, 78, 1, 77, 5,
	2, 75, 74, 3,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 2, 9, 9, 11,
	11, 10, 10, 7, 7, 13, 13, 12, 14, 14,
	14, 14, 14, 14, 8, 15, 15, 3, 16, 17,
	17, 6, 18, 20, 20, 19, 21, 21, 21, 21,
	21, 4, 22, 23, 23, 5,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 6, 1, 0, 4,
	5, 2, 0, 1, 2, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 10, 2, 3,
	0, 6, 2, 3, 0, 2, 1, 4, 1, 1,
	1, 5, 4, 5, 0, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 4, 5, 6,
	7, 8, -7, 34, 17, 14, -8, 17, 10, 9,
	10, -13, 26, -8, 16, -8, -8, -8, 17, 27,
	-22, 17, -10, 11, 27, -9, -11, 12, -13, -7,
	-10, 20, -12, 17, -18, -19, 17, -10, 12, -8,
	28, -15, 18, 19, -14, 20, 21, 22, 23, 24,
	25, 28, -20, 26, -21, 29, 30, 31, 32, 33,
	-8, 13, 15, -23, 26, -15, -19, 27, 13, -12,
	27, 17, -20, 19, -12, -16, -15, 20, 28, 28,
	-17, 26, -15, -15, -23, -17,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 0, 0, 0,
	0, 0, 0, 13, 16, 0, 0, 24, 0, 0,
	0, 14, 0, 0, 0, 12, 0, 8, 16, 0,
	12, 0, 45, 0, 0, 12, 7, 0, 15, 0,
	41, 0, 11, 0, 0, 34, 0, 6, 0, 0,
	0, 44, 25, 26, 0, 18, 19, 20, 21, 22,
	23, 31, 32, 0, 35, 36, 0, 38, 39, 40,
	0, 0, 0, 42, 0, 17, 34, 0, 0, 9,
	0, 0, 33, 0, 10, 0, 30, 0, 37, 27,
	28, 0, 44, 30, 43, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 34,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
